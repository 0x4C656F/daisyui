import{S as gs,i as ws,s as Is,e as t,t as o,k as d,c as a,a as n,h as l,d as s,m as c,b as B,g as T,H as e,M as Sa}from"../../chunks/vendor-df54b326.js";function Cs(ks){let y,qe,N,Fe,Me,We,Ye,Re,S,vs=`<code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//...</span>

  <span class="token comment">// add daisyUI plugin</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"daisyui"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

  <span class="token comment">// daisyUI config (optional)</span>
  <span class="token literal-property property">daisyui</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">styled</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">themes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">base</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">utils</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">logs</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">rtl</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">darkTheme</span><span class="token operator">:</span> <span class="token string">"dark"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">prefix</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code>`,He,A,ze,Le,u,b,Q,Ge,Je,V,X,Ke,Ne,O,Qe,Ve,Xe,Ze,E,Z,$e,et,$,ee,tt,at,x,st,ot,lt,j,nt,rt,k,te,it,dt,ae,se,ct,pt,P,ut,U,ft,ht,yt,v,oe,mt,bt,le,ne,Et,kt,R,vt,H,_t,gt,wt,_,re,It,Ct,ie,de,xt,Dt,ce,Bt,St,g,pe,Ot,Pt,ue,fe,Ut,Rt,m,Ht,he,Lt,Tt,At,jt,L,qt,Ft,Mt,w,ye,Wt,Yt,me,be,zt,Gt,I,Jt,Ee,Kt,Nt,ke,Qt,Vt,Xt,C,ve,Zt,$t,_e,ge,ea,ta,r,aa,sa,oa,we,la,na,Ie,ra,ia,da,ca,pa,ua,Ce,fa,ha,xe,ya,ma,ba,Ea,De,ka,va,Be,_a,ga,Se,wa,Ia,Oe,Ca,xa,Pe,Da,Ba;return{c(){y=t("p"),qe=o("daisyUI can be configured from your "),N=t("code"),Fe=o("tailwind.config.js"),Me=o(" file."),We=t("br"),Ye=o(`
Default config:`),Re=d(),S=t("pre"),He=d(),A=t("h2"),ze=o("Config values explained:"),Le=d(),u=t("ul"),b=t("li"),Q=t("h3"),Ge=o("styled"),Je=d(),V=t("p"),X=t("code"),Ke=o("Boolean (default: true)"),Ne=d(),O=t("p"),Qe=o("If it\u2019s true, components will have colors and style so you won\u2019t need to design anything."),Ve=t("br"),Xe=o(`
If it\u2019s false, components will have no color and no visual style so you can design your own style on a basic skeleton.`),Ze=d(),E=t("li"),Z=t("h3"),$e=o("themes"),et=d(),$=t("p"),ee=t("code"),tt=o("Boolean or array (default: true)"),at=d(),x=t("p"),st=o(`If it\u2019s true, all themes will be included.
If it\u2019s false, only light (default) theme will be available.`),ot=t("br"),lt=o(`
If it\u2019s an array, only themes in the array will be included and the first theme will be the default theme.
Read more about `),j=t("a"),nt=o("themes"),rt=d(),k=t("li"),te=t("h3"),it=o("base"),dt=d(),ae=t("p"),se=t("code"),ct=o("Boolean (default: true)"),pt=d(),P=t("p"),ut=o("If it\u2019s true, "),U=t("a"),ft=o("a few base styles"),ht=o(" will be added"),yt=d(),v=t("li"),oe=t("h3"),mt=o("utils"),bt=d(),le=t("p"),ne=t("code"),Et=o("Boolean (default: true)"),kt=d(),R=t("p"),vt=o("If it\u2019s true, "),H=t("a"),_t=o("responsive and utility classes"),gt=o(" will be added"),wt=d(),_=t("li"),re=t("h3"),It=o("logs"),Ct=d(),ie=t("p"),de=t("code"),xt=o("Boolean (default: true)"),Dt=d(),ce=t("p"),Bt=o("If it\u2019s true, daisyUI shows logs in terminal while CSS is building"),St=d(),g=t("li"),pe=t("h3"),Ot=o("rtl"),Pt=d(),ue=t("p"),fe=t("code"),Ut=o("Boolean (default: false)"),Rt=d(),m=t("p"),Ht=o("If it\u2019s true, your theme will be right-to-left. You need to add "),he=t("code"),Lt=o('dir="rtl"'),Tt=o(" to your body tag."),At=t("br"),jt=o(`
If you\u2019re using daisyUI with RTL option, I suggest using `),L=t("a"),qt=o("tailwindcss-flip"),Ft=o(" plugin because to flip all your Tailwind utilities automatically."),Mt=d(),w=t("li"),ye=t("h3"),Wt=o("darkTheme"),Yt=d(),me=t("p"),be=t("code"),zt=o('String (default: "dark")'),Gt=d(),I=t("p"),Jt=o("Allows us to pick another theme for system\u2019s auto dark mode. By default, "),Ee=t("code"),Kt=o("dark"),Nt=o(" theme (or a custom theme named "),ke=t("code"),Qt=o("dark"),Vt=o(") will be the default theme if no theme is specified and the user is using dark mode on their system. With this config, you can set another theme to be the default dark mode theme."),Xt=d(),C=t("li"),ve=t("h3"),Zt=o("prefix"),$t=d(),_e=t("p"),ge=t("code"),ea=o('String (default: "")'),ta=d(),r=t("p"),aa=o("Adds a prefix to class name for all daisyUI components and their associated utilities."),sa=t("br"),oa=o(`
For example: `),we=t("code"),la=o("btn"),na=o(" will become "),Ie=t("code"),ra=o("prefix-btn"),ia=o("."),da=t("br"),ca=o(`
If you\u2019re using a second CSS library that has similar class names, you can use this config to avoid conflicts.`),pa=t("br"),ua=o(`
Utility classes like color names (e.g. `),Ce=t("code"),fa=o("bg-primary"),ha=o(") or border-radius (e.g. "),xe=t("code"),ya=o("rounded-box"),ma=o(") will not be affected by this config because they\u2019re being added as extensions to Tailwind CSS classes."),ba=t("br"),Ea=o(`
If you use daisyUI `),De=t("code"),ka=o("prefix"),va=o(" option (like "),Be=t("code"),_a=o("daisy-"),ga=o(") and Tailwind CSS "),Se=t("code"),wa=o("prefix"),Ia=o(" option (like "),Oe=t("code"),Ca=o("tw-"),xa=o(") together, classnames will be prefixed like this: "),Pe=t("code"),Da=o("tw-daisy-btn"),Ba=o("."),this.h()},l(p){y=a(p,"P",{});var h=n(y);qe=l(h,"daisyUI can be configured from your "),N=a(h,"CODE",{});var Oa=n(N);Fe=l(Oa,"tailwind.config.js"),Oa.forEach(s),Me=l(h," file."),We=a(h,"BR",{}),Ye=l(h,`
Default config:`),h.forEach(s),Re=c(p),S=a(p,"PRE",{class:!0});var _s=n(S);_s.forEach(s),He=c(p),A=a(p,"H2",{});var Pa=n(A);ze=l(Pa,"Config values explained:"),Pa.forEach(s),Le=c(p),u=a(p,"UL",{});var f=n(u);b=a(f,"LI",{});var q=n(b);Q=a(q,"H3",{});var Ua=n(Q);Ge=l(Ua,"styled"),Ua.forEach(s),Je=c(q),V=a(q,"P",{});var Ra=n(V);X=a(Ra,"CODE",{});var Ha=n(X);Ke=l(Ha,"Boolean (default: true)"),Ha.forEach(s),Ra.forEach(s),Ne=c(q),O=a(q,"P",{});var Te=n(O);Qe=l(Te,"If it\u2019s true, components will have colors and style so you won\u2019t need to design anything."),Ve=a(Te,"BR",{}),Xe=l(Te,`
If it\u2019s false, components will have no color and no visual style so you can design your own style on a basic skeleton.`),Te.forEach(s),q.forEach(s),Ze=c(f),E=a(f,"LI",{});var F=n(E);Z=a(F,"H3",{});var La=n(Z);$e=l(La,"themes"),La.forEach(s),et=c(F),$=a(F,"P",{});var Ta=n($);ee=a(Ta,"CODE",{});var Aa=n(ee);tt=l(Aa,"Boolean or array (default: true)"),Aa.forEach(s),Ta.forEach(s),at=c(F),x=a(F,"P",{});var Ue=n(x);st=l(Ue,`If it\u2019s true, all themes will be included.
If it\u2019s false, only light (default) theme will be available.`),ot=a(Ue,"BR",{}),lt=l(Ue,`
If it\u2019s an array, only themes in the array will be included and the first theme will be the default theme.
Read more about `),j=a(Ue,"A",{href:!0});var ja=n(j);nt=l(ja,"themes"),ja.forEach(s),Ue.forEach(s),F.forEach(s),rt=c(f),k=a(f,"LI",{});var M=n(k);te=a(M,"H3",{});var qa=n(te);it=l(qa,"base"),qa.forEach(s),dt=c(M),ae=a(M,"P",{});var Fa=n(ae);se=a(Fa,"CODE",{});var Ma=n(se);ct=l(Ma,"Boolean (default: true)"),Ma.forEach(s),Fa.forEach(s),pt=c(M),P=a(M,"P",{});var Ae=n(P);ut=l(Ae,"If it\u2019s true, "),U=a(Ae,"A",{href:!0,rel:!0});var Wa=n(U);ft=l(Wa,"a few base styles"),Wa.forEach(s),ht=l(Ae," will be added"),Ae.forEach(s),M.forEach(s),yt=c(f),v=a(f,"LI",{});var W=n(v);oe=a(W,"H3",{});var Ya=n(oe);mt=l(Ya,"utils"),Ya.forEach(s),bt=c(W),le=a(W,"P",{});var za=n(le);ne=a(za,"CODE",{});var Ga=n(ne);Et=l(Ga,"Boolean (default: true)"),Ga.forEach(s),za.forEach(s),kt=c(W),R=a(W,"P",{});var je=n(R);vt=l(je,"If it\u2019s true, "),H=a(je,"A",{href:!0,rel:!0});var Ja=n(H);_t=l(Ja,"responsive and utility classes"),Ja.forEach(s),gt=l(je," will be added"),je.forEach(s),W.forEach(s),wt=c(f),_=a(f,"LI",{});var Y=n(_);re=a(Y,"H3",{});var Ka=n(re);It=l(Ka,"logs"),Ka.forEach(s),Ct=c(Y),ie=a(Y,"P",{});var Na=n(ie);de=a(Na,"CODE",{});var Qa=n(de);xt=l(Qa,"Boolean (default: true)"),Qa.forEach(s),Na.forEach(s),Dt=c(Y),ce=a(Y,"P",{});var Va=n(ce);Bt=l(Va,"If it\u2019s true, daisyUI shows logs in terminal while CSS is building"),Va.forEach(s),Y.forEach(s),St=c(f),g=a(f,"LI",{});var z=n(g);pe=a(z,"H3",{});var Xa=n(pe);Ot=l(Xa,"rtl"),Xa.forEach(s),Pt=c(z),ue=a(z,"P",{});var Za=n(ue);fe=a(Za,"CODE",{});var $a=n(fe);Ut=l($a,"Boolean (default: false)"),$a.forEach(s),Za.forEach(s),Rt=c(z),m=a(z,"P",{});var D=n(m);Ht=l(D,"If it\u2019s true, your theme will be right-to-left. You need to add "),he=a(D,"CODE",{});var es=n(he);Lt=l(es,'dir="rtl"'),es.forEach(s),Tt=l(D," to your body tag."),At=a(D,"BR",{}),jt=l(D,`
If you\u2019re using daisyUI with RTL option, I suggest using `),L=a(D,"A",{href:!0,rel:!0});var ts=n(L);qt=l(ts,"tailwindcss-flip"),ts.forEach(s),Ft=l(D," plugin because to flip all your Tailwind utilities automatically."),D.forEach(s),z.forEach(s),Mt=c(f),w=a(f,"LI",{});var G=n(w);ye=a(G,"H3",{});var as=n(ye);Wt=l(as,"darkTheme"),as.forEach(s),Yt=c(G),me=a(G,"P",{});var ss=n(me);be=a(ss,"CODE",{});var os=n(be);zt=l(os,'String (default: "dark")'),os.forEach(s),ss.forEach(s),Gt=c(G),I=a(G,"P",{});var J=n(I);Jt=l(J,"Allows us to pick another theme for system\u2019s auto dark mode. By default, "),Ee=a(J,"CODE",{});var ls=n(Ee);Kt=l(ls,"dark"),ls.forEach(s),Nt=l(J," theme (or a custom theme named "),ke=a(J,"CODE",{});var ns=n(ke);Qt=l(ns,"dark"),ns.forEach(s),Vt=l(J,") will be the default theme if no theme is specified and the user is using dark mode on their system. With this config, you can set another theme to be the default dark mode theme."),J.forEach(s),G.forEach(s),Xt=c(f),C=a(f,"LI",{});var K=n(C);ve=a(K,"H3",{});var rs=n(ve);Zt=l(rs,"prefix"),rs.forEach(s),$t=c(K),_e=a(K,"P",{});var is=n(_e);ge=a(is,"CODE",{});var ds=n(ge);ea=l(ds,'String (default: "")'),ds.forEach(s),is.forEach(s),ta=c(K),r=a(K,"P",{});var i=n(r);aa=l(i,"Adds a prefix to class name for all daisyUI components and their associated utilities."),sa=a(i,"BR",{}),oa=l(i,`
For example: `),we=a(i,"CODE",{});var cs=n(we);la=l(cs,"btn"),cs.forEach(s),na=l(i," will become "),Ie=a(i,"CODE",{});var ps=n(Ie);ra=l(ps,"prefix-btn"),ps.forEach(s),ia=l(i,"."),da=a(i,"BR",{}),ca=l(i,`
If you\u2019re using a second CSS library that has similar class names, you can use this config to avoid conflicts.`),pa=a(i,"BR",{}),ua=l(i,`
Utility classes like color names (e.g. `),Ce=a(i,"CODE",{});var us=n(Ce);fa=l(us,"bg-primary"),us.forEach(s),ha=l(i,") or border-radius (e.g. "),xe=a(i,"CODE",{});var fs=n(xe);ya=l(fs,"rounded-box"),fs.forEach(s),ma=l(i,") will not be affected by this config because they\u2019re being added as extensions to Tailwind CSS classes."),ba=a(i,"BR",{}),Ea=l(i,`
If you use daisyUI `),De=a(i,"CODE",{});var hs=n(De);ka=l(hs,"prefix"),hs.forEach(s),va=l(i," option (like "),Be=a(i,"CODE",{});var ys=n(Be);_a=l(ys,"daisy-"),ys.forEach(s),ga=l(i,") and Tailwind CSS "),Se=a(i,"CODE",{});var ms=n(Se);wa=l(ms,"prefix"),ms.forEach(s),Ia=l(i," option (like "),Oe=a(i,"CODE",{});var bs=n(Oe);Ca=l(bs,"tw-"),bs.forEach(s),xa=l(i,") together, classnames will be prefixed like this: "),Pe=a(i,"CODE",{});var Es=n(Pe);Da=l(Es,"tw-daisy-btn"),Es.forEach(s),Ba=l(i,"."),i.forEach(s),K.forEach(s),f.forEach(s),this.h()},h(){B(S,"class","language-js"),B(j,"href","/docs/themes"),B(U,"href","https://github.com/saadeghi/daisyui/blob/master/src/base"),B(U,"rel","nofollow"),B(H,"href","https://github.com/saadeghi/daisyui/tree/master/src/utilities"),B(H,"rel","nofollow"),B(L,"href","https://github.com/cvrajeesh/tailwindcss-flip"),B(L,"rel","nofollow")},m(p,h){T(p,y,h),e(y,qe),e(y,N),e(N,Fe),e(y,Me),e(y,We),e(y,Ye),T(p,Re,h),T(p,S,h),S.innerHTML=vs,T(p,He,h),T(p,A,h),e(A,ze),T(p,Le,h),T(p,u,h),e(u,b),e(b,Q),e(Q,Ge),e(b,Je),e(b,V),e(V,X),e(X,Ke),e(b,Ne),e(b,O),e(O,Qe),e(O,Ve),e(O,Xe),e(u,Ze),e(u,E),e(E,Z),e(Z,$e),e(E,et),e(E,$),e($,ee),e(ee,tt),e(E,at),e(E,x),e(x,st),e(x,ot),e(x,lt),e(x,j),e(j,nt),e(u,rt),e(u,k),e(k,te),e(te,it),e(k,dt),e(k,ae),e(ae,se),e(se,ct),e(k,pt),e(k,P),e(P,ut),e(P,U),e(U,ft),e(P,ht),e(u,yt),e(u,v),e(v,oe),e(oe,mt),e(v,bt),e(v,le),e(le,ne),e(ne,Et),e(v,kt),e(v,R),e(R,vt),e(R,H),e(H,_t),e(R,gt),e(u,wt),e(u,_),e(_,re),e(re,It),e(_,Ct),e(_,ie),e(ie,de),e(de,xt),e(_,Dt),e(_,ce),e(ce,Bt),e(u,St),e(u,g),e(g,pe),e(pe,Ot),e(g,Pt),e(g,ue),e(ue,fe),e(fe,Ut),e(g,Rt),e(g,m),e(m,Ht),e(m,he),e(he,Lt),e(m,Tt),e(m,At),e(m,jt),e(m,L),e(L,qt),e(m,Ft),e(u,Mt),e(u,w),e(w,ye),e(ye,Wt),e(w,Yt),e(w,me),e(me,be),e(be,zt),e(w,Gt),e(w,I),e(I,Jt),e(I,Ee),e(Ee,Kt),e(I,Nt),e(I,ke),e(ke,Qt),e(I,Vt),e(u,Xt),e(u,C),e(C,ve),e(ve,Zt),e(C,$t),e(C,_e),e(_e,ge),e(ge,ea),e(C,ta),e(C,r),e(r,aa),e(r,sa),e(r,oa),e(r,we),e(we,la),e(r,na),e(r,Ie),e(Ie,ra),e(r,ia),e(r,da),e(r,ca),e(r,pa),e(r,ua),e(r,Ce),e(Ce,fa),e(r,ha),e(r,xe),e(xe,ya),e(r,ma),e(r,ba),e(r,Ea),e(r,De),e(De,ka),e(r,va),e(r,Be),e(Be,_a),e(r,ga),e(r,Se),e(Se,wa),e(r,Ia),e(r,Oe),e(Oe,Ca),e(r,xa),e(r,Pe),e(Pe,Da),e(r,Ba)},p:Sa,i:Sa,o:Sa,d(p){p&&s(y),p&&s(Re),p&&s(S),p&&s(He),p&&s(A),p&&s(Le),p&&s(u)}}}const Ds={title:"Config",desc:"How to change the default configuration of daisyUI?",published:!0};class Bs extends gs{constructor(y){super();ws(this,y,null,Cs,Is,{})}}export{Bs as default,Ds as metadata};
